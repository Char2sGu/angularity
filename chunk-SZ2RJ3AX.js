import{a as h}from"./chunk-46TJBTHP.js";import{a as g}from"./chunk-MP3NNOXV.js";import"./chunk-OZEKEGSP.js";import{a as l}from"./chunk-Y2WVPISR.js";import{L as o,Sa as d,Ta as r,Yb as m,ka as p,xa as i}from"./chunk-VOAW662X.js";import{a as t,b as c,g as y}from"./chunk-P2VZOJAX.js";var v=y(m());var I={category:h,title:"Type-safe Providing",mdFile:"./index.md"},e=I;var u=[];var _={},f=_;var A=`<h1 id="type-safe-providing" class="ngde">Type-safe Providing<a title="Link to heading" class="ng-doc-header-link ngde" href="/core/type-safe-providing#type-safe-providing"><ng-doc-icon icon="link-2" size="16" class="ngde"></ng-doc-icon></a></h1><p class="ngde">In Angular, object literals are used to declare injectables of an injection context:</p><pre class="ngde hljs"><code class="hljs language-ts code-lines ngde" lang="ts" name="" icon="" highlightedlines="[]"><span class="line ngde"><span class="hljs-attr ngde">providers</span>: [
</span><span class="line ngde">  {
</span><span class="line ngde">    <span class="hljs-attr ngde"><a href="/references/core/functions/provide" class="ng-doc-code-anchor ngde" data-link-type="Function" class="ngde">provide</a></span>: <span class="hljs-title class_ ngde">TitleStrategy</span>,
</span><span class="line ngde">    <span class="hljs-attr ngde">useClass</span>: <span class="hljs-title class_ ngde">SuffixedTitleStrategy</span>,
</span><span class="line ngde">  },
</span><span class="line ngde">  {
</span><span class="line ngde">    <span class="hljs-attr ngde"><a href="/references/core/functions/provide" class="ng-doc-code-anchor ngde" data-link-type="Function" class="ngde">provide</a></span>: <span class="hljs-variable constant_ ngde">DIALOG_GLOBAL_CONFIG</span>,
</span><span class="line ngde">    <span class="hljs-attr ngde">useValue</span>: { <span class="hljs-attr ngde">closable</span>: <span class="hljs-literal ngde">false</span> } satisfies <span class="hljs-title class_ ngde">DialogGlobalConfig</span>,
</span><span class="line ngde">  },
</span><span class="line ngde">  {
</span><span class="line ngde">    <span class="hljs-attr ngde"><a href="/references/core/functions/provide" class="ng-doc-code-anchor ngde" data-link-type="Function" class="ngde">provide</a></span>: <span class="hljs-variable constant_ ngde">APP_INITIALIZER</span>,
</span><span class="line ngde">    <span class="hljs-attr ngde">multi</span>: <span class="hljs-literal ngde">true</span>,
</span><span class="line ngde">    <span class="hljs-attr ngde">useFactory</span>: <span class="hljs-function ngde">() =></span> <span class="hljs-function ngde">() =></span> <span class="hljs-variable language_ ngde">console</span>.<span class="hljs-title function_ ngde">log</span>(<span class="hljs-string ngde">'Initialized'</span>),
</span><span class="line ngde">  },
</span><span class="line ngde">];
</span></code></pre><p class="ngde">However, although the <code class="ngde">ProviderToken</code> already carries type information, the object literals cannot perform type checks to ensure type-safety, requiring the developer to manually make sure that the provided value is valid.</p><p class="ngde">In the snippet above, the developer:</p><ol class="ngde"><li class="ngde">Must make sure <code class="ngde">SuffixedTitleStrategy</code> correctly implements <code class="ngde">TitleStrategy</code>.</li><li class="ngde">Must use the <code class="ngde">satisfies</code> keyword to manually restrict the type of the provider of <code class="ngde">DIALOG_GLOBAL_CONFIG</code>.</li><li class="ngde">Cannot appropriately type the <code class="ngde">APP_INITIALIZER</code> since there is no such <code class="ngde">AppInitializer</code> type exported.</li></ol><p class="ngde">As a solution, Angularity offers <code class="ngde ng-doc-code-with-link" class="ngde"><a href="/references/core/functions/provide" class="ng-doc-code-anchor ngde" data-link-type="Function" class="ngde">provide</a></code> and <code class="ngde ng-doc-code-with-link" class="ngde"><a href="/references/core/functions/provideMulti" class="ng-doc-code-anchor ngde" data-link-type="Function" class="ngde">provideMulti</a></code> as helper functions for type-safe provider declarations:</p><pre class="ngde hljs"><code class="hljs language-ts code-lines ngde" lang="ts" name="" icon="" highlightedlines="[]"><span class="line ngde"><span class="hljs-attr ngde">providers</span>: [
</span><span class="line ngde">  <span class="hljs-title function_ ngde"><a href="/references/core/functions/provide" class="ng-doc-code-anchor ngde" data-link-type="Function" class="ngde">provide</a></span>({
</span><span class="line ngde">    <span class="hljs-attr ngde">token</span>: <span class="hljs-title class_ ngde">TitleStrategy</span>,
</span><span class="line ngde">    <span class="hljs-attr ngde">useClass</span>: <span class="hljs-title class_ ngde">SuffixedTitleStrategy</span>,
</span><span class="line ngde">  }),
</span><span class="line ngde">  <span class="hljs-title function_ ngde"><a href="/references/core/functions/provide" class="ng-doc-code-anchor ngde" data-link-type="Function" class="ngde">provide</a></span>({
</span><span class="line ngde">    <span class="hljs-attr ngde">token</span>: <span class="hljs-variable constant_ ngde">DIALOG_GLOBAL_CONFIG</span>,
</span><span class="line ngde">    <span class="hljs-attr ngde">useValue</span>: { <span class="hljs-attr ngde">closable</span>: <span class="hljs-literal ngde">false</span> },
</span><span class="line ngde">  }),
</span><span class="line ngde">  <span class="hljs-title function_ ngde"><a href="/references/core/functions/provideMulti" class="ng-doc-code-anchor ngde" data-link-type="Function" class="ngde">provideMulti</a></span>({
</span><span class="line ngde">    <span class="hljs-attr ngde">token</span>: <span class="hljs-variable constant_ ngde">APP_INITIALIZER</span>,
</span><span class="line ngde">    <span class="hljs-attr ngde">useFactory</span>: <span class="hljs-function ngde">() =></span> <span class="hljs-function ngde">() =></span> <span class="hljs-variable language_ ngde">console</span>.<span class="hljs-title function_ ngde">log</span>(<span class="hljs-string ngde">'Initialized'</span>),
</span><span class="line ngde">  }),
</span><span class="line ngde">];
</span></code></pre><p class="ngde">In the example above, all the providers' types are automatically inferred and restricted from the token. By elevating the <code class="ngde">multi</code> option to the function name, it also helps prevent the developer from forgetting the <code class="ngde">multi</code> option.</p>`,k=(()=>{let s=class s extends l{constructor(){super(),this.routePrefix="",this.pageType="guide",this.pageContent=A,this.page=e,this.demoAssets=f}};s.\u0275fac=function(a){return new(a||s)},s.\u0275cmp=o({type:s,selectors:[["ng-doc-page-core-type-safe-providing"]],standalone:!0,features:[d([{provide:l,useExisting:s},u,e.providers??[]]),p,r],decls:1,vars:0,template:function(a,O){a&1&&i(0,"ng-doc-page")},dependencies:[g],encapsulation:2,changeDetection:0});let n=s;return n})(),P=[c(t({},(0,v.isRoute)(e.route)?e.route:{}),{path:"",component:k,title:"Type-safe Providing"})],R=P;export{k as DynamicComponent,R as default};
