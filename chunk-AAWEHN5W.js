import{a as h}from"./chunk-46TJBTHP.js";import{a as g}from"./chunk-MP3NNOXV.js";import"./chunk-OZEKEGSP.js";import{a as c}from"./chunk-Y2WVPISR.js";import{L as t,Sa as i,Ta as r,Yb as j,ka as d,xa as p}from"./chunk-VOAW662X.js";import{a as l,b as o,g as x}from"./chunk-P2VZOJAX.js";var y=x(j());var E={category:h,title:"Exceptions",mdFile:"./index.md"},e=E;var f=[];var k={},u=k;var w=`<h1 id="exceptions" class="ngde">Exceptions<a title="Link to heading" class="ng-doc-header-link ngde" href="/core/exception#exceptions"><ng-doc-icon icon="link-2" size="16" class="ngde"></ng-doc-icon></a></h1><p class="ngde">In Angularity, JavaScript runtime errors are divided into two categories: Errors and Exceptions.</p><ul class="ngde"><li class="ngde">Exceptions are instances of the <code class="ngde ng-doc-code-with-link" class="ngde"><a href="/references/core/classes/Exception" class="ng-doc-code-anchor ngde" data-link-type="Class" class="ngde">Exception</a></code> class. They are expected to be caught and appropriately handled.</li><li class="ngde">Errors are all the errors that are not instances of <code class="ngde ng-doc-code-with-link" class="ngde"><a href="/references/core/classes/Exception" class="ng-doc-code-anchor ngde" data-link-type="Class" class="ngde">Exception</a></code>. They are regarded as critical errors that should never happen and typically breaks the application, such as <code class="ngde">TypeError</code>. The occurrence of such an error implies something is wrong within the application that awaits fixes.</li></ul><p class="ngde">To create a type of exception, declare a class that extends from the <code class="ngde ng-doc-code-with-link" class="ngde"><a href="/references/core/classes/Exception" class="ng-doc-code-anchor ngde" data-link-type="Class" class="ngde">Exception</a></code> class.</p><pre class="ngde hljs"><code class="hljs language-ts code-lines ngde" lang="ts" name="" icon="" highlightedlines="[]"><span class="line ngde"><span class="hljs-keyword ngde">class</span> <span class="hljs-title class_ ngde">EntityNotFoundException</span> <span class="hljs-keyword ngde">extends</span> <span class="hljs-title class_ inherited__ ngde"><a href="/references/core/classes/Exception" class="ng-doc-code-anchor ngde" data-link-type="Class" class="ngde">Exception</a></span> {}
</span></code></pre><p class="ngde">Additional customizations can apply to add contextual properties or generate uniformed error messages:</p><pre class="ngde hljs"><code class="hljs language-ts code-lines ngde" lang="ts" name="" icon="" highlightedlines="[]"><span class="line ngde"><span class="hljs-keyword ngde">class</span> <span class="hljs-title class_ ngde">EntityNotFoundException</span> <span class="hljs-keyword ngde">extends</span> <span class="hljs-title class_ inherited__ ngde"><a href="/references/core/classes/Exception" class="ng-doc-code-anchor ngde" data-link-type="Class" class="ngde">Exception</a></span> {
</span><span class="line ngde">  <span class="hljs-title function_ ngde">constructor</span>(<span class="hljs-params ngde"></span>
</span><span class="line ngde"><span class="hljs-params ngde">    </span><span class="hljs-keyword ngde">readonly</span> <span class="hljs-keyword ngde">type</span>: Type&#x3C;<span class="hljs-built_in ngde">any</span><span class="hljs-params ngde">>,</span>
</span><span class="line ngde"><span class="hljs-params ngde">    </span><span class="hljs-keyword ngde">readonly</span> id: <span class="hljs-built_in ngde">string</span><span class="hljs-params ngde">,</span>
</span><span class="line ngde"><span class="hljs-params ngde">  </span>) {
</span><span class="line ngde">    <span class="hljs-variable language_ ngde">super</span>(<span class="hljs-string ngde">\`<span class="hljs-subst ngde">\${<span class="hljs-keyword ngde">type</span>.name}</span> of id <span class="hljs-subst ngde">\${id}</span> is not found.\`</span>);
</span><span class="line ngde">  }
</span><span class="line ngde">}
</span></code></pre><p class="ngde">It is worthy to note that both Exceptions and Errors are instances of <code class="ngde">Error</code>. The way to distinguish them is <code class="ngde">instanceof Exception</code>, not <code class="ngde">instanceof Error</code>.</p><pre class="ngde hljs"><code class="hljs language-ts code-lines ngde" lang="ts" name="" icon="" highlightedlines="[]"><span class="line ngde"><span class="hljs-keyword ngde">catch</span> (e) {
</span><span class="line ngde">  <span class="hljs-keyword ngde">const</span> isException = e <span class="hljs-keyword ngde">instanceof</span> <span class="hljs-title class_ ngde"><a href="/references/core/classes/Exception" class="ng-doc-code-anchor ngde" data-link-type="Class" class="ngde">Exception</a></span>;
</span><span class="line ngde">  <span class="hljs-keyword ngde">const</span> isError = !(e <span class="hljs-keyword ngde">instanceof</span> <span class="hljs-title class_ ngde"><a href="/references/core/classes/Exception" class="ng-doc-code-anchor ngde" data-link-type="Class" class="ngde">Exception</a></span>);
</span><span class="line ngde">}
</span></code></pre><p class="ngde">A recommended way to compose the catch block is to exhaust all the exceptions that are expected to be caught and re-throw the error if none of the exceptions are matched:</p><pre class="ngde hljs"><code class="hljs language-ts code-lines ngde" lang="ts" name="" icon="" highlightedlines="[]"><span class="line ngde"><span class="hljs-keyword ngde">catch</span> (e) {
</span><span class="line ngde">  <span class="hljs-keyword ngde">if</span> (e <span class="hljs-keyword ngde">instanceof</span> <span class="hljs-title class_ ngde">SomeException</span>) {
</span><span class="line ngde">    <span class="hljs-title function_ ngde">doSomething</span>();
</span><span class="line ngde">  } <span class="hljs-keyword ngde">else</span> <span class="hljs-keyword ngde">if</span> (e <span class="hljs-keyword ngde">instanceof</span> <span class="hljs-title class_ ngde">AnotherException</span>) {
</span><span class="line ngde">    <span class="hljs-title function_ ngde">doSomething</span>();
</span><span class="line ngde">  } <span class="hljs-keyword ngde">else</span> {
</span><span class="line ngde">    <span class="hljs-keyword ngde">throw</span> e
</span><span class="line ngde">  }
</span><span class="line ngde">}
</span></code></pre><p class="ngde">All Angularity libraries follow this convention for error handling, and it is recommended to also follow such convention in applications that uses Angularity.</p>`,_=(()=>{let s=class s extends c{constructor(){super(),this.routePrefix="",this.pageType="guide",this.pageContent=w,this.page=e,this.demoAssets=u}};s.\u0275fac=function(a){return new(a||s)},s.\u0275cmp=t({type:s,selectors:[["ng-doc-page-core-exception"]],standalone:!0,features:[i([{provide:c,useExisting:s},f,e.providers??[]]),d,r],decls:1,vars:0,template:function(a,A){a&1&&p(0,"ng-doc-page")},dependencies:[g],encapsulation:2,changeDetection:0});let n=s;return n})(),C=[o(l({},(0,y.isRoute)(e.route)?e.route:{}),{path:"",component:_,title:"Exceptions"})],I=C;export{_ as DynamicComponent,I as default};
